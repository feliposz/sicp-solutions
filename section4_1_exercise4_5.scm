(define (cond? exp) (tagged-list? exp 'cond))
(define (cond-clauses exp) (cdr exp))
(define (cond-else-clause? clause)
  (eq? (cond-predicate clause) 'else))
(define (cond-=>-clause? clause)
  (eq? (cadr clause) '=>))
(define (cond-predicate clause) (car clause))
(define (cond-actions clause) (cdr clause))
(define (cond->if exp)
  (expand-clauses (cond-clauses exp)))
(define (expand-clauses clauses)
  (if (null? clauses)
      'false				; no else clause
      (let ((first (car clauses))
            (rest (cdr clauses)))
	(if (cond-=>-clause? first)   ; special form (<test> => <recipient>)
	    (let ((test (car first))
		  (recipient (caddr first)))
	      (list 
	       (make-lambda (list 'internal-result)
			    (list (make-if 'internal-result
					   (list recipient 'internal-result)
					   (expand-clauses rest))))
	       test))
	    (if (cond-else-clause? first)
		(if (null? rest)
		    (sequence->exp (cond-actions first))
		    (error "ELSE clause isn't last -- COND->IF"
			   clauses))
		(make-if (cond-predicate first)
			 (sequence->exp (cond-actions first))
			 (expand-clauses rest)))))))

