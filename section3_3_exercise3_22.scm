(define nil '())

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (empty-queue?) 
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (error "Front called with an empty queue")
          (car front-ptr )))
    (define (insert-queue! elt)
      (let ((new-pair (cons elt nil)))
        (cond ((empty-queue?)
               (set! front-ptr new-pair)
               (set! rear-ptr new-pair))
              (else
               (set-cdr! rear-ptr new-pair)
               (set! rear-ptr new-pair)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "Delete of empty queue"))
            (else
             (set! front-ptr (cdr front-ptr )))))
    (define (print-queue)
      (if (empty-queue?)
          (display "The queue is empty")
          (begin
            (display "Queue:")
            (display front-ptr)))
      (newline))
    (define (dispatch m)
      (cond ((eq? m 'front-queue) front-queue)
            ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            ((eq? m 'print-queue) print-queue)
            (else (error "Unknown method for queue:" m))))
    dispatch))

(define (empty-queue? q) ((q 'empty-queue?)))
(define (front-queue q) ((q 'front-queue)))
(define (insert-queue! q elt) ((q 'insert-queue!) elt))
(define (delete-queue! q) ((q 'delete-queue!)))
(define (print-queue q) ((q 'print-queue)))

(display "Test 1 => queue: q") (newline)
(define q (make-queue)) (print-queue q)
(empty-queue? q)
(insert-queue! q 'b) (print-queue q)
(insert-queue! q 'c) (print-queue q)
(insert-queue! q 'd) (print-queue q)
(front-queue q)
(insert-queue! q 'a) (print-queue q)
(delete-queue! q) (print-queue q)
(front-queue q)
(delete-queue! q) (print-queue q)
(front-queue q)
(delete-queue! q) (print-queue q)
(front-queue q)
(delete-queue! q) (print-queue q)
(insert-queue! q 'e) (print-queue q)

(newline)

(display "Test 2 => queue: q1") (newline)
(define q1 (make-queue)) (print-queue q1)
(insert-queue! q1 'a) (print-queue q1)
(insert-queue! q1 'b)(print-queue q1)
(front-queue q1)
(delete-queue! q1) (print-queue q1)
(front-queue q1)
(delete-queue! q1) (print-queue q1)
(print-queue q1) (print-queue q1)
